%name           "libft"
%author         "Nax"
%identifier     "OpenFT"
%desc           "The reference libft suite for OpenTester"

%match			"libft.a"

%{
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>

typedef struct 		s_list
{
	void*			content;
	size_t			content_size;
	struct s_list*	next;
}					t_list;

%}

%symbol			void*	ft_memset(void*, int, size_t)
%symbol         void    ft_bzero(void*, int)
%symbol         void*   ft_memcpy(void*, void*, int)
%symbol 		void*   ft_memccpy(void*, void*, int, size_t)
%symbol 		void*   ft_memmove(void*, void*, size_t)
%symbol 		void*   ft_memchr(const void*, int, size_t)
%symbol 		int     ft_memcmp(const void*, const void*, size_t)
%symbol 		size_t  ft_strlen(char*)
%symbol 		char*   ft_strdup(char*)
%symbol 		char*   ft_strcpy(char*, char*)
%symbol 		char*   ft_strncpy(char*, char*, size_t)
%symbol 		char*   ft_strcat(char*, char*)
%symbol 		char*   ft_strncat(char*, char*, size_t)
%symbol 		int     ft_strlcat(char*, char*, size_t)
%symbol 		char*   ft_strchr(char*, int)
%symbol 		char*   ft_strrchr(char*, int)
%symbol 		char*   ft_strstr(char*, char*)
%symbol 		char*   ft_strnstr(char*, char*, size_t)
%symbol 		int     ft_strcmp(char*, char*)
%symbol 		int     ft_strncmp(char*, char*, int)
%symbol 		int     ft_atoi(char*)
%symbol 		int     ft_isalpha(int)
%symbol 		int     ft_isdigit(int)
%symbol 		int     ft_isalnum(int)
%symbol 		int     ft_isascii(int)
%symbol 		int     ft_isprint(int)
%symbol 		int     ft_toupper(int)
%symbol 		int     ft_tolower(int)

%symbol 		void*   ft_memalloc(size_t)
%symbol 		void    ft_memdel(void*)
%symbol 		char*   ft_strnew(size_t)
%symbol 		void    ft_strdel(char**)
%symbol 		void    ft_strclr(char*)
%symbol 		void    ft_striter(char*, void*)
%symbol 		void    ft_striteri(char*, void*)
%symbol 		char*   ft_strmap(char*, void*)
%symbol 		char*   ft_strmapi(char*, void*)
%symbol 		int     ft_strequ(char*, char*)
%symbol 		int     ft_strnequ(char*, char*, size_t)
%symbol 		char*   ft_strsub(char*, size_t, size_t)
%symbol 		char*   ft_strjoin(char*, char*)
%symbol 		char*   ft_strtrim(char*)
%symbol 		char**  ft_strsplit(char*, char)
%symbol 		char*   ft_itoa(int)
%symbol 		void    ft_putchar(char)
%symbol 		void    ft_putstr(char*)
%symbol 		void    ft_putendl(char*)
%symbol 		void    ft_putnbr(int)
%symbol 		void    ft_putchar_fd(char, int)
%symbol 		void    ft_putstr_fd(char*, int)
%symbol 		void    ft_putendl_fd(char*, int)
%symbol 		void    ft_putnbr_fd(int, int)

%symbol 		t_list* ft_lstnew(void*, size_t)
%symbol 		void    ft_lstdelone(t_list**, void*)
%symbol 		void    ft_lstdel(t_list**, void*)
%symbol 		void    ft_lstadd(t_list**, t_list*)
%symbol 		void    ft_lstiter(t_list*, void*)
%symbol 		t_list* ft_lstmap(t_list*, void*)

%test "ft_memset" %{
    char    b1[100], b2[100];

    ft_memset(b1, 42, 100);
    memset(b2, 42, 100);
    assert_equal(memset(b1, 99, 0), ft_memset(b1, 99, 0), "should return dst");
    assert_equal(memcmp(b1, b2, 100), 0, "should fill a buffer of length 100 with 42");
    b1[0] = 1;
    ft_memset(b1, 0, 0);
    assert_equal(b1[0], 1, "should not write to buffen when length is 0");
%}

%test "ft_bzero" %{
    char    b1[42], b2[42];

    bzero(b1, 10);
    ft_bzero(b2, 10);
    assert_zero(memcmp(b1, b2, 10), "should zero a buffen of length 10");
    bzero(b1, 42);
    ft_bzero(b2, 42);
    assert_zero(memcmp(b1, b2, 42), "should zero a buffen of length 42");
    b1[0] = 1;
    ft_bzero(b1, 0);
    assert_equal(b1[0], 1, "should not write to buffer when length is 0");
%}

%test "ft_memcpy" %{
    char    b1[10];
    char    b2[10] = {7, 42, 68, -44, 0, 6, 8, 9, 0, 77};

    ft_memcpy(b1, b2, 10);
    assert_equal(memcmp(b1, b2, 10), 0, "should copy a buffer of length 10");
    assert_equal(b1, ft_memcpy(b1, b2, 0), "should return dst");
%}

%test "ft_memccpy" %{
    char    buf1[] = "Ceci est un test.";
    char    buf2[200];
    void    *p1, *p2;

    p1 = memccpy(buf2, buf1, 'i', 10);
    p2 = ft_memccpy(buf2, buf1, 'i', 10);
    assert_equal(p1, p2, "should copy a buffer of size 10 with 'i' as a delimiter");
    assert_zero(ft_memccpy(buf2, buf1, 'k', 5), "should return NULL on not found");
    assert_equal(ft_memccpy(buf2, buf1, 0, 0), memccpy(buf2, buf1, 0, 0), "should behave correctly with a length of 0");
    assert_equal(ft_memccpy(buf2, buf1, 0, sizeof(buf1)), memccpy(buf2, buf1, 0, sizeof(buf1)), "should behave correctly when seeking for a NUL byte");
    assert_equal(ft_memccpy(buf2, buf1, 'C', 10), buf2 + 1, "should behave correctly on match");
%}

%test "ft_memmove" %{
    char    test[] = "abcdef";

    ft_memmove(test + 1, test, 5);
    ft_memmove(test + 1, test, 0);
    assert_zero(strcmp(test, "aabcde"), "should copy forward and backward");
%}

%test "ft_memchr" %{
    char    test[] = "abcdef";

    assert_equal(ft_memchr(test, 'a', 5), test, "should match the first char in a string");
    assert_equal(ft_memchr(test, 'c', 5), test + 2, "should match a char in a string");
    assert_equal(ft_memchr(test, '\0', 7), memchr(test, '\0', 7), "should behave correctly when seeking for a NUL byte");
    assert_zero(ft_memchr(test, 'z', 6), "should return NULL on not found");
%}

%test "ft_memcmp" %{
    char    *t = "ab\0ab";

    assert_zero(ft_memcmp(t, t, 5), "should return zero when comparing against itself");
    assert_not_zero(ft_memcmp(t, "abcab", 5), "should return nonzero when bytes are different");
    assert_less(ft_memcmp("aaa", "aab", 4), 0, "should return a negative integer when s2 > s1");
    assert_zero(ft_memcmp("aww", "bpp", 0), "should return zero when length is 0");
%}

%test "ft_strlen" %{
    
    assert_equal(ft_strlen("chat"), 4, "should return 4 on a string of length 4");
    assert_zero(ft_strlen(""), "should return zero on the empty string");
    assert_equal(ft_strlen("abcde"), 5, "should return 5 on a string of length 5");
%}

%test "ft_strdup" %{
    char    *c = "AbC";
    
    assert_zero(strcmp(ft_strdup("aaaaa"), "aaaaa"), "should return a string with the same content");
    assert_zero(strcmp(ft_strdup(""), ""), "should return an empty string when called on the empty string");
    assert_not_equal(c, ft_strdup(c), "should return a string with a different address");
    assert_zero(ft_strdup("abc")[4], "should return a NUL terminated string");
%}

%test "ft_strcpy" %{
    char    buf[6];

    ft_strcpy(buf, "abcde");
    assert_zero(strcmp(buf, "abcde"), "should copy a string of length 5");
%}

%test "ft_strncpy" %{
    char    b[6];

    ft_strncpy(b, "abc", 6);
    assert_zero(memcmp(b, "abc\0\0", 6), "should copy a string of length 3 in a buffer of capacity 6");
    ft_strncpy(b, "abcdefghi", 6);
    assert_zero(memcmp(b, "abcdefghi", 6), "should truncate and copy a string of length 9 in a buffer of capacity 6");
%}

%test "ft_strcat" %{
    char    buf[9];

    bzero(buf, 9);
    ft_strcat(buf, "Bon");
    ft_strcat(buf, "jour.");
    ft_strcat(buf, "");
    assert_zero(strcmp(buf, "Bonjour."), "should concat multiple strings, including the empty string");
%}

%test "ft_strncat" %{
    char    buf[20];
    
    strcpy(buf, "To be ");
    ft_strncat(buf, "or not to be", 6);
    assert_zero(strcmp(buf, "To be or not"), "should concat and truncate multiple strings");
    ft_strncat(buf, "efefef", 0);
    assert_zero(strcmp(buf, "To be or not"), "should not write to string when length is zero");
    assert_equal(buf, ft_strncat(buf, "", 0), "should return dst");
%}

%test "ft_strlcat" %{
    char    buf[10];

    bzero(buf, 10);
    strcpy(buf, "abc");
    ft_strlcat(buf, "abcdefghijklmnop", 10);
    assert_zero(strcmp(buf, "abcabcdef"), "should concat and truncate a string");
    assert_equal(ft_strlcat(buf, "abcd", 2), 6, "should return the length of the full string");
    bzero(buf, 10);
    assert_equal(ft_strlcat(buf, "abc", 10), 3, "should return the length of the full string");
    assert_equal(ft_strlcat(buf, "def", 10), 6, "should return the length of the full string");
    bzero(buf, 10);
    memset(buf, 'a', 10);
    assert_equal(ft_strlcat(buf, "ccc", 10), 13, "should return the length of the full string");
%}

%test "ft_strchr" %{
    char    buf[] = "Je suis un poisson.";

    assert_equal(strchr(buf, 'p'), ft_strchr(buf, 'p'), "should match on 'p'");
    assert_equal(strchr(buf, 0), ft_strchr(buf, 0), "should match on NUL byte");
    assert_equal(ft_strchr(buf, 'J'), buf, "should match on first char");
    assert_zero(ft_strchr(buf, 'z'), "should return NULL on not found");
%}

%test "ft_strrchr" %{
    char    buf[] = "abcdedcba";

    assert_equal(strrchr(buf, 'a'), ft_strrchr(buf, 'a'), "should match on 'a'");
    assert_equal(strrchr(buf, 0), ft_strrchr(buf, 0), "should match on NUL byte");
    assert_zero(ft_strrchr(buf, 'z'), "should return NULL on not found");
    buf[5] = 0;
    assert_equal(ft_strrchr(buf, 'a'), buf, "should match on first char");
%}

%test "ft_strstr" %{
    char    buf[] = "Ceci n'est pas une pipe.";
    
    assert_equal(strstr(buf, "une"), ft_strstr(buf, "une"), "should match a substring");
    assert_equal(strstr(buf, ""), ft_strstr(buf, ""), "should match the empty string");
    assert_zero(strstr(buf, "aaaaa"), "should return NULL on not found");
    assert_zero(ft_strstr(buf, "BWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"), "should return NULL on not found");
%}

%test "ft_strnstr" %{
    char    buf[10];
    
    bzero(buf, 10);
    strcpy(buf, "un deux 9");
    assert_equal(strnstr(buf, "deux", 10), ft_strnstr(buf, "deux", 10), "should match a substring in the first 10 chars");
    assert_equal(strnstr(buf, "9", 3), ft_strnstr(buf, "9", 3), "should match a substring in the first 3 chars");
    assert_equal(ft_strnstr(buf, "", 6), buf, "should match the empty string");
    assert_equal(ft_strnstr(buf, "deux", 5), strnstr(buf, "deux", 5), "should not search past the first 5 chars");
    assert_equal(ft_strnstr(buf, "9", 10), strnstr(buf, "9", 10), "should match the last char");
    buf[9] = '6';
    assert_equal(strnstr(buf, "cinq", 10), ft_strnstr(buf, "cinq", 10), "should return NULL on not found");
    assert_equal(strnstr(buf, "deux", 10), ft_strnstr(buf, "deux", 10), "should match in the first 10 chars");
    assert_equal(strnstr(buf, "9682", 10), ft_strnstr(buf, "9682", 10), "should not match past the end");
    assert_equal(strnstr(buf, "6", 10), ft_strnstr(buf, "6", 10), "should match in the first 10 chars");
    buf[1] = 0;
    assert_equal(strnstr(buf, "deux", 10), ft_strnstr(buf, "deux", 10), "should match nothing on the empty string");
%}

%test "ft_strcmp" %{
    assert_zero(ft_strcmp("abc", "abc"), "should return zero on equal strings");
    assert_less(ft_strcmp("abc", "abd"), 0, "should return a negative integer when s1 < s2");
    assert_not_zero(ft_strcmp("a", "abcde"), "should return a nonzero integer on different strings");
%}

%test "ft_strncmp" %{
    assert_zero(ft_strncmp("abc", "abcde", 3), "should return zero when the first 3 chars are identical");
    assert_zero(ft_strncmp("abc", "abc\0defg", 100), "should return zero on identical strings");
    assert_not_zero(ft_strncmp("ab\0cde", "abcc\0e", 20), "should return nonzero on different strings");
%}

%test "ft_atoi" %{
    assert_zero(ft_atoi(" -sfecf"), "should return 0 on non numerical string");
    assert_equal(ft_atoi("+2798"), 2798, "should handle +");
    assert_equal(ft_atoi("  \t\n  \r\r\v\f-899"), -899, "should handle whitespaces");
    assert_equal(ft_atoi("+0089"), 89, "should handle trailing zeroes");
    assert_equal(ft_atoi("-2147483648"), -2147483648, "should handle minimum integer");
    assert_equal(ft_atoi("a56"), 0, "should stop on first non numerical char");
    assert_equal(ft_atoi("    555 5555555555555555"), 555, "should stop on whitespace");
%}

%test "ft_isalpha" %{
    assert_true(ft_isalpha('a'), "should return true on 'a'");
    assert_false(ft_isalpha('a' + 0x100), "should return false on non ASCII");
    assert_false(ft_isalpha('2'), "should return false on '2'");
    assert_true(ft_isalpha('Z'), "should return true on 'Z'");
    assert_true(ft_isalpha('t'), "should return true on 't'");
%}

%test "ft_isdigit" %{
    assert_false(ft_isdigit(0), "should return false on NUL");
    assert_true(ft_isdigit('8'), "should return true on '8'");
    assert_false(ft_isdigit('8' + 0x100), "should return false on non-ASCII");
%}

%test "ft_isalnum" %{
    assert_false(ft_isalnum(' '), "should return false on space");
    assert_true(ft_isalnum('6'), "should return true on '6'");
    assert_true(ft_isalnum('Z'), "should return true on 'Z'");
    assert_false(ft_isalnum('5' + 0x100), "should return false on non-ASCII");
%}

%test "ft_isascii" %{
    assert_false(ft_isascii(200), "should return false on non-ASCII");
    assert_true(ft_isascii(0), "should return true on NUL");
    assert_true(ft_isascii(127), "should return true on DEL");
%}

%test "ft_isprint" %{
    assert_false(ft_isprint(0), "should return false on NUL");
    assert_false(ft_isprint(127), "should return false on DEL");
    assert_true(ft_isprint(' '), "should return true on space");
    assert_true(ft_isprint('a'), "should return true on 'a'");
    assert_true(ft_isprint('~'), "should return true on '~'");
%}

%test "ft_toupper" %{
    assert_equal(ft_toupper('a'), 'A', "should map 'a' to 'A'");
    assert_equal(ft_toupper(12345), 12345, "should map 12345 to 12345");
    assert_equal(ft_toupper(' '), ' ', "should map space to space");
    assert_equal(ft_toupper('Z'), 'Z', "should map 'Z' to 'Z'");
    assert_equal(ft_toupper('z'), 'Z', "should map 'z' to 'Z'");
%}

%test "ft_tolower" %{
    assert_equal(ft_tolower('T'), 't', "should map 'T' to 't'");
    assert_equal(ft_tolower(99999), 99999, "should map 99999 to 99999");
    assert_equal(ft_tolower('e'), 'e', "should map 'e' to 'e'");
    assert_equal(ft_tolower('Z'), 'z', "should map 'Z' to 'z'");
%}

%test "ft_memalloc" %{
    void    *mem1, *mem2;
    
    mem1 = malloc(100);
    bzero(mem1, 100);
    mem2 = ft_memalloc(100);
    assert_zero(memcmp(mem1, mem2, 100), "should allocate a 100 byte blob filled with zeroes");
    assert_zero(ft_memalloc(0), "should return NULL on size 0");
    assert_zero(ft_memalloc((size_t)-1), "should return NULL on allocation error");
%}

%test "ft_memdel" %{
    void    *mem;
    
    mem = malloc(2000);
    ft_memdel(&mem);
    assert_zero(mem, "should set the freed pointer to NULL");
%}

%test "ft_strnew" %{
    char    *str;
    char    *t;
    
    str = ft_strnew(0);
    assert_not_zero(str, "should create an empty string");
    str = ft_strnew(100);
    t = malloc(101);
    bzero(t, 101);
    assert_zero(memcmp(str, t, 101), "should create a 101 bytes blob filled with zeroes");
    assert_zero(ft_strnew((size_t)-10), "should return NULL on error");
%}

%test "ft_strdel" %{
    char    *str;
    
    str = malloc(123);
    ft_strdel(&str);
    assert_zero(str, "should set the freed pointer to NULL");
%}

%test "ft_strclr" %{
    char    str[] = "tttttt";
    
    ft_strclr(str);
    assert_zero(memcmp(str, "\0\0\0\0\0\0", 7), "should clear a string of length 7");
%}

%{
static void
it_test(char *c)
{
    (*c)++;
}
%}


%test "ft_striter" %{
    char    str[] = "aBcDeF";
    
    ft_striter(str, it_test);
    assert_zero(strcmp(str, "bCdEfG"), "should iterate a function");
%}

%{
static void
iti_test(unsigned int i, char *c)
{
    (*c) += i;
}
%}

%test "ft_striteri" %{
    char    str[] = "aBcDeF";
    
    ft_striteri(str, iti_test);
    assert_zero(strcmp(str, "aCeGiK"), "should iterate an indexed function");
%}

%{
static char
map_test(char c)
{
    return c + 1;
}
%}

%test "ft_strmap" %{
    char    *str;
    
    str = "abcde";
    str = ft_strmap(str, map_test);
    assert_zero(ft_strcmp(str, "bcdef"), "should map using a function");
%}

%{
static char
mapi_test(unsigned int i, char c)
{
    return c + i;
}
%}

%test "ft_strmapi" %{
    char    *str;
    
    str = "abcde";
    str = ft_strmapi(str, mapi_test);
    assert_zero(ft_strcmp(str, "acegi"), "should map using an indexed function");
%}

%test "ft_strequ" %{
    assert_true(ft_strequ("", ""), "should return true on empty strings");
    assert_true(ft_strequ("abcDEF", "abcDEF"), "should return true on equal strings");
    assert_false(ft_strequ("abcDEF", "abcDEf"), "should return false on different strings");
%}

%test "ft_strnequ" %{
    assert_true(ft_strnequ("ededeqdf", "", 0), "should return true on length 0");
    assert_true(ft_strnequ("abcde", "abdfe", 2), "should return true on substrings of length 2");
    assert_true(ft_strnequ("abc", "abc", 100), "should return true on equal strings");
    assert_false(ft_strnequ("abcde", "abdde", 5), "should return false on different strings");
%}

%test "ft_strsub" %{
    char    *str;
    
    str = "Un jour je serai, le meilleur dresseur !";
    assert_zero(ft_strsub(str, 0, (size_t)-10), "should return NULL on allocation error");
    assert_zero(strcmp(ft_strsub(str, 8, 8), "je serai"), "should create a substring on [8, 8]");
    assert_zero(strcmp(ft_strsub(str, 0, 0), ""), "should create an empty substring");
%}

%test "ft_strjoin" %{
    assert_zero(strcmp(ft_strjoin("abc", "def"), "abcdef"), "should concatenate two strings");
    assert_zero(strcmp(ft_strjoin("", ""), ""), "should concatenate empty strings");
%}

%test "ft_strtrim" %{
    assert_zero(strcmp(ft_strtrim("\t\n  \tAAA \t BBB\t\n  \t"), "AAA \t BBB"), "should trim a string");
    assert_zero(strcmp(ft_strtrim("\t\t\n\t\t   "), ""), "should trim to the empty string");
    assert_zero(strcmp(ft_strtrim(""), ""), "should trim the empty string");
    assert_zero(strcmp(ft_strtrim("abc"), "abc"), "should work on non trimmable strings");
%}

%test "ft_strsplit" %{
    char    **tt;
    
    tt = ft_strsplit("***salut****!**", '*');
    assert_zero(strcmp(tt[0], "salut"), "should split a string");
    assert_zero(strcmp(tt[1], "!"), "should split a string");
    assert_zero(tt[2], "should split a string");
    tt = ft_strsplit("*****", '*');
    assert_zero(tt[0], "should split a string");
    tt = ft_strsplit("coucou", '*');
    assert_zero(strcmp(tt[0], "coucou"), "should split a string");
    assert_zero(tt[1], "should split a string");
%}

%test "ft_itoa" %{
    assert_zero(strcmp(ft_itoa(0), "0"), "should convert 0 to string");
    assert_zero(strcmp(ft_itoa(-1234), "-1234"), "should convert 1234 to string");
    assert_zero(strcmp(ft_itoa(123456000), "123456000"), "should convert 123456000 to string");
    assert_zero(strcmp(ft_itoa(-2147483648), "-2147483648"), "should convert the minimal integer to string");
%}

%test "ft_putchar" %{
    int     out;
    int     p[2];
    char    buf[4];

    out = dup(1);
    pipe(p);
    dup2(p[1], 1);
    ft_putchar('a');
    ft_putchar('b');
    ft_putchar('c');
    dup2(out, 1);
    read(p[0], buf, 3);
    buf[3] = 0;
    close(p[0]);
    close(p[1]);
    close(out);
    assert_zero(strcmp(buf, "abc"), "should output to stdout");
%}

%test "ft_putstr" %{
    int     out;
    int     p[2];
    char    buf[4];

    out = dup(1);
    pipe(p);
    dup2(p[1], 1);
    ft_putstr("aaa");
    dup2(out, 1);
    read(p[0], buf, 3);
    buf[3] = 0;
    close(p[0]);
    close(p[1]);
    close(out);
    assert_zero(strcmp(buf, "aaa"), "should output to stdout");
%}

%test "ft_putendl" %{
    int     out;
    int     p[2];
    char    buf[4];

    
    out = dup(1);
    pipe(p);
    dup2(p[1], 1);
    ft_putendl("aa");
    dup2(out, 1);
    read(p[0], buf, 3);
    buf[3] = 0;
    close(p[0]);
    close(p[1]);
    close(out);
    assert_zero(strcmp(buf, "aa\n"), "should output to stdout");
%}

%test "ft_putnbr" %{
    int     out;
    int     p[2];
    char    buf[100];

    
    out = dup(1);
    pipe(p);
    dup2(p[1], 1);
    ft_putnbr(0);
    ft_putnbr(12300);
    ft_putnbr(-56);
    ft_putnbr(-2147483648);
    dup2(out, 1);
    buf[read(p[0], buf, 100)] = 0;
    close(p[0]);
    close(p[1]);
    close(out);
    assert_zero(strcmp(buf, "012300-56-2147483648"), "should output to stdout");
 %}

%test "ft_putchar_fd" %{
    int     p[2];
    char    buf[100];

    
    pipe(p);
    ft_putchar_fd('a', p[1]);
    ft_putchar_fd('b', p[1]);
    buf[read(p[0], buf, 100)] = 0;
    close(p[0]);
    close(p[1]);
    assert_zero(strcmp(buf, "ab"), "should output to stdout");
%}

%test "ft_putstr_fd" %{
    int     p[2];
    char    buf[100];

    
    pipe(p);
    ft_putstr_fd("A QUE KOUKOU", p[1]);
    buf[read(p[0], buf, 100)] = 0;
    close(p[0]);
    close(p[1]);
    assert_zero(strcmp(buf, "A QUE KOUKOU"), "should output to stdout");
%}

%test "ft_putendl_fd" %{
    int     p[2];
    char    buf[100];

    
    pipe(p);
    ft_putendl_fd("A QUE KOUKOU", p[1]);
    buf[read(p[0], buf, 100)] = 0;
    close(p[0]);
    close(p[1]);
    assert_zero(strcmp(buf, "A QUE KOUKOU\n"), "should output to stdout");
%}

%test "ft_putnbr_fd" %{
    int     p[2];
    char    buf[100];

    
    pipe(p);
    ft_putnbr_fd(0, p[1]);
    ft_putnbr_fd(56, p[1]);
    ft_putnbr_fd(-1230, p[1]);
    ft_putnbr_fd(-2147483648, p[1]);
    buf[read(p[0], buf, 100)] = 0;
    close(p[0]);
    close(p[1]);
    assert_zero(strcmp(buf, "056-1230-2147483648"), "should output to stdout");
%}

%{
static int g_del;
%}

%test "ft_lstnew" %{
    t_list  *list;
    int     ft;

    ft = 42;
    list = ft_lstnew(&ft, sizeof(int));
    assert_equal((*(int*)(list->content)), 42, "should create a node pointing to the value 42");
    list = ft_lstnew(NULL, 386);
    assert_zero((list->content_size), "should set the content size to 0 when the data is NULL");
%}

%{
static void
del_test(void *data, size_t i)
{
    (void)data;
    (void)i;
    g_del++;
}
%}

%test "ft_lstdelone" %{
    t_list  *list;
    int     ft;

    g_del = 0;
    ft = 42;
    list = (t_list *)malloc(sizeof(t_list));
    list->content = &ft;
    list->content_size = sizeof(int);
    ft_lstdelone(&list, del_test);
    assert_zero(list, "should set the freed pointer to NULL");
    assert_equal(g_del, 1, "should call the dtor function once");
%}

%test "ft_lstdel" %{
    t_list  *list;
    int     ft;

    ft = 42;
    g_del = 0;
    list = malloc(sizeof(t_list));
    bzero(list, sizeof(t_list));
    list->next = malloc(sizeof(t_list));
    bzero(list->next, sizeof(t_list));
    list->content = &ft;
    list->next->content = (&ft) + 1;
    ft_lstdel(&list, del_test);
    assert_zero(list, "should put the freed pointer to NULL");
    assert_equal(g_del, 2, "should call the dtor function on each node");
%}

%test "ft_lstadd" %{
    t_list  *list;
    t_list  *list2;

    list = malloc(sizeof(t_list));
    list2 = malloc(sizeof(t_list));
    bzero(list, sizeof(t_list));
    bzero(list2, sizeof(t_list));
    ft_lstadd(&list2, list);
    assert_equal(list, list2, "should add the new node to the front");
%}

%{
static void
lstiter_test(t_list *ppp)
{
    ppp->content_size = 42;
}
%}

%test "ft_lstiter" %{
    t_list  *list;

    bzero((list = malloc(sizeof(t_list))), sizeof(t_list));
    bzero(((list->next) = malloc(sizeof(t_list))), sizeof(t_list));
    ft_lstiter(list, lstiter_test);
    assert_equal(list->content_size, 42, "should iterate over the list");
    assert_equal(list->next->content_size, 42, "should iterate over the list");
%}

%{
static t_list*
lstmap_test(t_list *list)
{
    t_list  *l2;

    l2 = malloc(sizeof(t_list));
    bzero(l2, sizeof(t_list));
    l2->content_size = list->content_size * 2;
    return (l2);
}
%}

%test "ft_lstmap" %{
    t_list  *list;
    t_list  *map;

    bzero((list = malloc(sizeof(t_list))), sizeof(t_list));
    bzero((list->next = malloc(sizeof(t_list))), sizeof(t_list));
    list->content_size = 21;
    list->next->content_size = 100;
    map = ft_lstmap(list, lstmap_test);
    assert_equal(list->content_size, 21, "should not modify the original list");
    assert_equal(list->next->content_size, 100, "should not modify the original list");
    assert_equal(map->content_size, 42, "should map to a new list");
    assert_equal(map->next->content_size, 200, "should map to a new list");
%}
